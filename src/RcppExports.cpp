// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test_pgbinary_cpp
Rcpp::List test_pgbinary_cpp(const Eigen::MatrixXd& C, const Eigen::VectorXi& Y, const Eigen::MatrixXd& Cnv, int N_sample, bool output_pi);
RcppExport SEXP _FLAG_test_pgbinary_cpp(SEXP CSEXP, SEXP YSEXP, SEXP CnvSEXP, SEXP N_sampleSEXP, SEXP output_piSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Cnv(CnvSEXP);
    Rcpp::traits::input_parameter< int >::type N_sample(N_sampleSEXP);
    Rcpp::traits::input_parameter< bool >::type output_pi(output_piSEXP);
    rcpp_result_gen = Rcpp::wrap(test_pgbinary_cpp(C, Y, Cnv, N_sample, output_pi));
    return rcpp_result_gen;
END_RCPP
}
// which_minn_rcpp
Rcpp::IntegerVector which_minn_rcpp(const Rcpp::NumericVector& z, int r);
RcppExport SEXP _FLAG_which_minn_rcpp(SEXP zSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(which_minn_rcpp(z, r));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FLAG_test_pgbinary_cpp", (DL_FUNC) &_FLAG_test_pgbinary_cpp, 5},
    {"_FLAG_which_minn_rcpp", (DL_FUNC) &_FLAG_which_minn_rcpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FLAG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
