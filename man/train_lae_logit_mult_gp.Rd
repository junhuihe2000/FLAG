% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_lae_logit_mult_gp.R
\name{train_lae_logit_mult_gp}
\alias{train_lae_logit_mult_gp}
\title{Train Gaussian process logistic multinomial regression with local anchor embedding kernels}
\usage{
train_lae_logit_mult_gp(
  eigenpair,
  Y,
  K,
  J,
  sigma = 0.001,
  N = NULL,
  approach = "posterior",
  t0 = NULL,
  lower = 0.001,
  upper = 100
)
}
\arguments{
\item{eigenpair}{A list includes values and vectors.}

\item{Y}{A numeric vector with length(m), each element indicates the label,
taking value in \code{c(0:(J-1))}.}

\item{K}{An integer, the number of used eigenpairs.}

\item{J}{An integer, the number of classes.}

\item{sigma}{A non-negative number, the weight coefficient of ridge penalty on H,
the defaulting value is 1e-3.}

\item{N}{A numeric vector with length(m), total count.}

\item{approach}{A character vector, taking value in c("posterior", "marginal"),
decides which objective function to be optimized, defaulting value is \code{posterior}.}

\item{t0}{A positive double, the initial guess for t, defaulting value \code{10}.}

\item{lower}{the lower bound on t, defaulting value \code{1e-3}.}

\item{upper}{the upper bound on t, defaulting value \code{100}.}
}
\value{
A model list with J-1 model, each model includes four components
\describe{
\item{Y}{the re-encoded training samples.}
\item{idx}{the index of Y in original samples.}
\item{t}{the optimal diffusion time.}
\item{obj}{the corresponding optimal objective function value.}
}
}
\description{
Compose J-1 binary logistic regression to implement the multinomial regression.
}
\examples{
X0 <- matrix(rnorm(3*3), 3, 3)
X1 <- matrix(rnorm(3*3, 5), 3, 3)
X2 <- matrix(rnorm(3*3, -5), 3, 3)
Y <- c(0,0,0,1,1,1,2,2,2)
X <- rbind(X0,X1,X2)
X0_new <- matrix(rnorm(10*3),10,3)
X1_new <- matrix(rnorm(10*3, 5),10,3)
X2_new <- matrix(rnorm(10*3, -5),10,3)
X_new <- rbind(X0_new, X1_new, X2_new)
s <- 6; r <- 3
K <- 3
J <- 3
eigenpair <- heat_kernel_spectrum(X, X_new, s, r, K=K)
train_lae_logit_mult_gp(eigenpair, Y, K, J)
}
